@page "/"
@inject ILogger<Index> logger

<h3>Actions</h3>

<button class="btn btn-secondary">No event callback</button>
<button class="btn btn-secondary" @onclick="() => { }">Empty event callback</button>
<button class="btn btn-secondary" @onclick="() => { i++; }">Add 1</button>

<CounterDisplay Value="@i" />

@code{
	int i = 1000;
	CultureInfo culture = CultureInfo.GetCultureInfo("cs-CZ");

	protected override void OnAfterRender(bool firstRender)
	{
		base.OnAfterRender(firstRender);
		logger.LogInformation($"{nameof(Index)} - {nameof(OnAfterRender)}");
	}
}














@*

	TODO:
		1. Culture
		2. EventCallback
		3. Binding (jinak zapsaný EventCallback)

	Links:
	https://github.com/dotnet/aspnetcore/blob/a450cb69b5e4549f5515cdb057a68771f56cefd7/src/Components/Components/src/RenderTree/RenderTreeDiffBuilder.cs#L545

	https://github.com/dotnet/aspnetcore/blob/a450cb69b5e4549f5515cdb057a68771f56cefd7/src/Components/Components/src/ParameterView.cs#L139
	// In general we can't detect mutations on arbitrary objects. We can't trust
	// things like .Equals or .GetHashCode because they usually only tell us about
	// shallow changes, not deep mutations. So we return false if both:
	//  [1] All the parameters are known to be immutable (i.e., Type.IsPrimitive
	//      or is in a known set of common immutable types)
	//  [2] And all the parameter values are equal to their previous values
	// Otherwise be conservative and return false.

	https://github.com/dotnet/aspnetcore/blob/a450cb69b5e4549f5515cdb057a68771f56cefd7/src/Components/Components/src/ChangeDetection.cs#L39

*@

@*<CounterDisplay Value="@i" Culture="@culture" />*@
@*<CounterDisplay Value="@i" Confirmed="() => { }" />*@
@*<CounterDisplay @bind-Value="i" />*@
